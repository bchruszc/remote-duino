# SConstruct file
env=Environment()

ragel_bld = Builder(action = '/usr/bin/ragel -G0 -o $TARGET $SOURCE',
              suffix = '.cpp', src_suffix = '.rl')
ragel_dot_bld = Builder(action = '/usr/bin/ragel -o $TARGET -V -p $SOURCE',
              suffix = '.dot', src_suffix = '.rl')
ragel_dot_bld_sub = Builder(action = '/usr/bin/ragel -M $MACHINE -o $TARGET -V -p $SOURCE',
              suffix = '.dot', src_suffix = '.rl')
dot_bld = Builder(action = '/usr/bin/dot -o $TARGET -Tpdf $SOURCE',
              suffix = '.pdf', src_suffix = '.dot')


# Add the new Builder to the list of builders
env['BUILDERS']['Ragel'] = ragel_bld
env['BUILDERS']['RagelDot'] = ragel_dot_bld
env['BUILDERS']['RagelDotSub'] = ragel_dot_bld_sub
env['BUILDERS']['Dot'] = dot_bld

DEBUG = ARGUMENTS.get('DEBUG', 0)
MACHINE = ARGUMENTS.get('MACHINE', None)

ragel_source = 'RemoteDuinoServer.rl'
if DEBUG:
    env.Append(CPPFLAGS=['-g'])
    env.Append(LINKFLAGS=['-g'])
elif MACHINE is not None:
    dots = env.RagelDotSub('%s.dot' % MACHINE, ragel_source, MACHINE=MACHINE)
    env.Dot(dots)
else:
    env.Append(CPPFLAGS=['-Os'])

server_source = env.Ragel('RemoteDuinoServer_parser.cpp', ragel_source)
#env.Program('Server', ['main.cpp', server_source])

dot = env.RagelDot(ragel_source)
env.Dot(dot)
